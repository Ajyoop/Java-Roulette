
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Ellio
 */
public class Application extends javax.swing.JPanel implements ActionListener {

    //Variabler
    Player spel;
    Timer timer;
    int time;

    //tiden mellan varje tick i millisekunder
    int speed = 5;

    //Hatigheten som hjulet rör sig med
    int vel = 5;

    int winningNumber;
    int totalTime;

    //Skapar hjulet och spelaren med saldo 100
    ArrayList<Slot> wheel = new ArrayList<>();
    Player player = new Player(100);

    /**
     * Creates new form Application
     */
    public Application() {
        initComponents();

        //Sakpar min tmer och actionlistenern
        timer = new Timer(speed, null);
        timer.addActionListener(this);

        //Skapar brickorna och ritar upp dem
        createWheel();
        //Uppdaterar saldo
        updateBalance();

        //Buttongroup för radiobuttons
        ButtonGroup grupp = new ButtonGroup();
        grupp.add(this.redRadio);
        grupp.add(this.greenRadio);
        grupp.add(this.blackRadio);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        rollbtn = new javax.swing.JButton();
        balanceField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        previousGamesField = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addBalTen = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        addBalTwenty = new javax.swing.JButton();
        addBalFifty = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        indexSort = new javax.swing.JButton();
        winSort = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        betField = new javax.swing.JTextField();
        redRadio = new javax.swing.JRadioButton();
        greenRadio = new javax.swing.JRadioButton();
        blackRadio = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        gameText = new javax.swing.JLabel();

        jRadioButton1.setText("jRadioButton1");

        setMaximumSize(new java.awt.Dimension(800, 450));

        rollbtn.setText("Roll");
        rollbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollbtnActionPerformed(evt);
            }
        });

        balanceField.setEditable(false);

        jLabel2.setText("Balance");

        previousGamesField.setEditable(false);
        previousGamesField.setColumns(20);
        previousGamesField.setRows(5);
        jScrollPane1.setViewportView(previousGamesField);

        jLabel3.setText("Bet");

        jLabel4.setText("Previous games");

        addBalTen.setText("$10");
        addBalTen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBalTenActionPerformed(evt);
            }
        });

        jLabel5.setText("Add Balance");

        addBalTwenty.setText("$20");
        addBalTwenty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBalTwentyActionPerformed(evt);
            }
        });

        addBalFifty.setText("$50");
        addBalFifty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBalFiftyActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        indexSort.setText("Index");
        indexSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexSortActionPerformed(evt);
            }
        });

        winSort.setText("Win");
        winSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(winSort)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexSort)
                    .addComponent(winSort))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setText("Sortera");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        redRadio.setText("Red");

        greenRadio.setText("Green");

        blackRadio.setText("Black");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(betField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(redRadio)
                        .addGap(18, 18, 18)
                        .addComponent(greenRadio)
                        .addGap(18, 18, 18)
                        .addComponent(blackRadio)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(betField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redRadio)
                    .addComponent(greenRadio)
                    .addComponent(blackRadio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elliotgamblingproblem (1).png"))); // NOI18N
        jLabel7.setText("jLabel7");

        gameText.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        gameText.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(211, 211, 211))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 276, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 191, Short.MAX_VALUE)
                                    .addComponent(rollbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addBalFifty, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addBalTwenty, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addBalTen))
                                .addGap(8, 8, 8))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(balanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(64, 64, 64)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(293, 293, 293)
                .addComponent(gameText, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addBalTen)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addBalTwenty)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addBalFifty)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gameText, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 132, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rollbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(balanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rollbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollbtnActionPerformed
        int minTime = 1000;
        int randomTime = (int) (Math.random() * 3001);
        totalTime = minTime + randomTime;
        //Kollar om bettet är ett nummer
        try {
            int bet = Integer.valueOf(this.betField.getText().trim());
            bet += 0;
            //kollar om du har tillräcklig balance för att lägga bettet
            if (bet > player.getBalance() || bet == 0) {
                JOptionPane.showMessageDialog(this, "Low Balance", "Fel", JOptionPane.ERROR_MESSAGE);
                return;
            }
            player.setBalance(player.getBalance() - bet);
            updateBalance();
        } catch (NumberFormatException err) {
            JOptionPane.showMessageDialog(this, "Only Numbers", "Fel", JOptionPane.ERROR_MESSAGE);

            return;
        }
        rollDisable();
        timer.start();

        


    }//GEN-LAST:event_rollbtnActionPerformed

    private void addBalTenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBalTenActionPerformed
        //Ökar Balance med 10
        addBal(10);
    }//GEN-LAST:event_addBalTenActionPerformed

    private void addBalFiftyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBalFiftyActionPerformed
        //Ökar Balance med 50
        addBal(50);
    }//GEN-LAST:event_addBalFiftyActionPerformed

    private void addBalTwentyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBalTwentyActionPerformed
        //Ökar Balance med 20
        addBal(20);
    }//GEN-LAST:event_addBalTwentyActionPerformed

    private void indexSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexSortActionPerformed
        //Sorterar previous games efter ordningen de spelades i
        indexSort();
        listGames();
    }//GEN-LAST:event_indexSortActionPerformed

    private void winSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winSortActionPerformed
        // Sorterar previous games efter största vinsten
        winSort();
        listGames();
    }//GEN-LAST:event_winSortActionPerformed

    /**
     *  Exekverar kod varje tick på timern
     * @param action variabel
     */
    public void actionPerformed(ActionEvent action) {
        Object o = action.getSource();
        if (o == timer) {
            time += speed;
            //Kollar om tiden timern kört är mindre än tiden den ska köra
            if (time < totalTime) {
                
                spin(wheel);

            } else {

                time = 0;
                timer.stop();
                int bet = Integer.valueOf(this.betField.getText());
                String chosenColor = "";
                //Vilken färg du har valt
                if (this.redRadio.isSelected()) {
                    chosenColor = "red";
                } else if (this.greenRadio.isSelected()) {
                    chosenColor = "green";
                } else if (this.blackRadio.isSelected()) {
                    chosenColor = "black";
                }
                else{
                    player.setBalance(player.getBalance() + bet);
                }
                int win = 0;
                // Kollar om du har valt den färgen som van och delar ut dn vinst
                if (chosenColor.equals(winnerColor())) {
                    if (chosenColor.equals("red") || chosenColor.equals("black")) {
                        win = 2 * bet;
                        player.setBalance(player.getBalance() + win);
                        this.gameText.setText("You win!");
                    } else if (chosenColor.equals("green")) {
                        win *= 10 * bet;
                        this.gameText.setText("You win!");
                        player.setBalance(player.getBalance() + win);

                    }

                } else {
                    this.gameText.setText("You lost!");
                }

                //skapar spelet som precis genomförts och gör programmet redo för ett till spel
                player.newGame(bet, chosenColor, winnerColor(), win, player.getGames().size());
                listGames();
                updateBalance();
                rollEnable();
            }

        }

    }

    /**
     * Flyttar slotsen i hjulet i sidled med hastigheten vel
     *
     * @param wheel hjulet
     */
    public void spin(ArrayList<Slot> wheel) {
        for (int i = 0; i < wheel.size(); i++) {
            if (wheel.get(i).getxCord() - 80 == -160) {
                wheel.get(i).setxCord(800);
            }
            wheel.get(i).setxCord(wheel.get(i).getxCord() - vel);
        }
        repaint();

    }

    /**
     * Skriver upp alla games som genomförts i textarean
     */
    public void listGames() {
        this.previousGamesField.setText("");
        for (int i = 0; i < player.getGames().size(); i++) {
            this.previousGamesField.append(player.getGames().get(i).toString());
        }
    }

    /**
     * Lägger till balance
     *
     * @param bal balance som ska läggas till
     */
    public void addBal(int bal) {
        player.setBalance(player.getBalance() + bal);
        updateBalance();
    }

    /**
     * Uppdaterar balance
     */
    public void updateBalance() {
        this.balanceField.setText(String.valueOf(player.getBalance()));
    }

    /**
     * Körs i början för att skapa hjulet med alla slots.
     */
    public void createWheel() {
        for (int i = 0; i < 11; i++) {
            Color col;
            if (i == 0) {
                col = Color.GREEN;
            } else if (i % 2 == 0) {
                col = Color.RED;
            } else {
                col = Color.BLACK;
            }
            Slot e = new Slot(1, col, 80 * i);

            wheel.add(e);
        }

    }

    /**
     * Stänger av alla funktioner som inte ska användas när hjulet snurrar
     */
    public void rollDisable() {
        this.rollbtn.setEnabled(false);
        this.redRadio.setEnabled(false);
        this.greenRadio.setEnabled(false);
        this.blackRadio.setEnabled(false);
        this.betField.setEditable(false);
        this.gameText.setText("");

    }

    /**
     * Enablar allt som rollDisable() stänger av.
     */
    public void rollEnable() {
        this.rollbtn.setEnabled(true);
        this.redRadio.setEnabled(true);
        this.greenRadio.setEnabled(true);
        this.blackRadio.setEnabled(true);
        this.betField.setEditable(true);
    }

    /**
     * Tar reda på vilken färg som vann
     *
     * @return Färgen som vann
     */
    public String winnerColor() {
        for (int i = 0; i < wheel.size(); i++) {
            if (wheel.get(i).getxCord() > 319 && wheel.get(i).getxCord() < 401) {
                if (wheel.get(i).getFärg() == Color.red) {
                    return "red";
                } else if (wheel.get(i).getFärg() == Color.green) {
                    return "green";
                } else if (wheel.get(i).getFärg() == Color.BLACK) {
                    return "black";
                }

            }

        }
        return "";
    }

    /**
     * Sorterar alla games efter i vilken ordning de spelades
     */
    public void indexSort() {
        int len = player.getGames().size();
        for (int i = 0; i < len - 1; i++) {
            for (int j = 0; j < len - i - 1; j++) {
                int första = player.getGames().get(j).getIndex();
                int andra = player.getGames().get(j + 1).getIndex();

                if (första > andra) {
                    Game temp = player.getGames().get(j);
                    player.getGames().set(j, player.getGames().get(j + 1));
                    player.getGames().set(j + 1, temp);
                }
            }
        }
    }

    /**
     * Sorterar alla games efter hur stor vinsten var
     */
    public void winSort() {
        int len = player.getGames().size();
        for (int i = 0; i < len - 1; i++) {
            for (int j = 0; j < len - i - 1; j++) {
                int första = player.getGames().get(j).getWin();
                int andra = player.getGames().get(j + 1).getWin();

                if (första < andra) {
                    Game temp = player.getGames().get(j);
                    player.getGames().set(j, player.getGames().get(j + 1));
                    player.getGames().set(j + 1, temp);
                }
            }
        }
    }

    /**
     * paintComponent ritar upp allt
     *
     * @param g Graphics
     */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (wheel != null) {
            for (int i = 0; i < wheel.size(); i++) {
                wheel.get(i).drawSlot(g);
            }
        }
        drawLine(g);

    }

    /**
     * Ritar upp mittlinjen
     *
     * @param g Graphics
     */
    public void drawLine(Graphics g) {
        g.setColor(Color.GRAY);
        g.fillRect(398, 170, 4, 100);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBalFifty;
    private javax.swing.JButton addBalTen;
    private javax.swing.JButton addBalTwenty;
    private javax.swing.JTextField balanceField;
    private javax.swing.JTextField betField;
    private javax.swing.JRadioButton blackRadio;
    private javax.swing.JLabel gameText;
    private javax.swing.JRadioButton greenRadio;
    private javax.swing.JButton indexSort;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea previousGamesField;
    private javax.swing.JRadioButton redRadio;
    private javax.swing.JButton rollbtn;
    private javax.swing.JButton winSort;
    // End of variables declaration//GEN-END:variables
}
